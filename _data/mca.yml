flowimage: assets/images/gamma/flow.png
 

subtopics:
 - type: imtxt
   color: green
   title: "Features : 1024 channel MCA"
   image: assets/images/mca_pic.png
   features:
    - 3.3V Shaped Input. 3uS rise time.
    - 12-bit adjustable threshold
    - 12-bit ADC
    - 1024 channels. Fully USB powered unit
    - 16 million counts per channel
    - 8uS processing time per pulse
    - Fully featured Python software supplied open-source.
   subscript: Dual parameter list mode MCA also available for coincidence measurements

 - type: imtxt
   color: blue
   title: 4096 channel MCA
   image: assets/images/mca_pic.png
   features:
    - 4V Shaped Input. 3uS rise time.
    - 12-bit adjustable threshold
    - 16-bit ADC
    - 4096 channels. Fully USB powered unit
    - 2 Bytes per channel.
    - 10uS processing time per pulse including 3uS rise time
    - Fully featured Python software supplied open-source.

topics:
 - title: Software
   description: Open-source software, CNSpec, is supplied with the instrument.
   link: cnspec
   tabstyle: active
   image: /assets/images/cnspec/cnspec_1200.jpg
   imagestyle: fluid rounded raised

 - title: MCA poster
   link: assets/posters/mca1k.svg
   image: assets/posters/mca1k.svg
   imagestyle: fluid rounded raised

offline_example: |
 import time,sys
 import numpy as np
 from MCALib import connect 

 dev = connect()

 fname = 'DATA/bi212_19mA_10min_31mar18/data_240mins.csv'
 dev.loadFile(fname)

 # Get the data. Supply an optional name argument in case of multiple files/connected hardware.
 x = dev.getHistogram() #name = fname / name='/dev/ttyUSB0'

 #print the whole array. No decimal Points. Suppress scientific notation
 np.set_printoptions(threshold = np.inf,precision = 0,suppress=True) #
 print (x)

 #plot the loaded spectrum
 import matplotlib.pyplot as plt
 plt.plot(x) #Plot RAW data 

 FIT = dev.gaussianTailFit([750,850]) #Apply a gaussian+Lorentzian FIT between 700 and 900  channel, and overlay it.
 if FIT:
 	plt.plot(FIT['X'],FIT['Y']) #Plot fitted data
 	print('Gaussian+low energy tail Fit : ',FIT['centroid'],FIT['fwhm'])
 
 FIT = dev.gaussianFit([500,600]) #Apply a gaussian FIT between 500 and 600 channel.
 if FIT:
 	plt.plot(FIT['X'],FIT['Y']) #Plot fitted data
 	print('Gaussian Fit : ',FIT['centroid'],FIT['fwhm'])

 plt.show()

end: blank



